@require: gr
@require: math
@require: list
@require: code
@require: annot
@require: class-slydifi/slydifi
@require: class-slydifi/functions/color
@require: enumitem/enumitem
@require: class-slydifi/functions/footnote
@require: class-slydifi/functions/overlay

% SLyDIFi with Hachioji theme.
module SlydifiHachioji : sig

% configs
  %val cfg-pager: (|
  %  width: length;
  %  height: length;
  %|)

  val cfg-text: (|
    normal: config-font;
    mono: config-font;
    emph: config-font;
    frame-title: config-font;
    header: config-font;
    footer: config-font;
    slide-title: config-font;
    slide-author: config-font;
    slide-date: config-font;
    section-title: config-font;
    footnote: config-font;
    quote: config-font
  |)

  val cfg-color: (|
    bg          : color;
    fg          : color;
    main-grid   : color;
    sub-grid    : color;
    link        : color;
    title       : color;
    emph        : color;
    header      : color;
    footer      : color;
    quote       : color;
    quote-line : color;
  |)

  val cfg-spacing: (|
    text-width               : length;
    text-height              : length;
    text-horizontal-margin   : length;
    text-vertical-margin     : length;
    header-basepos           : length;
    footer-basepos           : length;
    main-grid                : length;
    sub-grid                 : length;
    bg-gr-start-point        : length;
    title-padding-lr         : length;
    title-padding-upper-line : length;
    title-padding-lower-line : length;
    title-line-width         : length;
  |)

  val document: 'a -> block-text -> document
    constraint 'a :: (|
      draft-mode: bool;
    |)

  direct +make-title : ['a] block-cmd
    constraint 'a :: (|
      title: inline-text list;
      author: inline-text list;
      date: inline-text list;
    |)
  direct +section : [inline-text list; block-text] block-cmd
  direct +frame : [inline-text; block-text] block-cmd
  direct +frame-nt : [block-text] block-cmd
  direct +multiframe : [int; inline-text; block-text] block-cmd

  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  %direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd

  direct +quote : [block-text] block-cmd

  direct +listing : [int?; itemize] block-cmd
  direct \listing : [int?; itemize] inline-cmd
  direct +listing-overlay : [int?; itemize] block-cmd
  %direct +enumerate-overlay : [int?; itemize] block-cmd
  %direct \cond-item : [(int -> bool)] inline-cmd
  val label-dia  : int list -> context -> inline-boxes
  val label-tria : int list -> context -> inline-boxes
  val label-circ : int list -> context -> inline-boxes
  val label-rule : int list -> context -> inline-boxes

  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let cfg-paper = (|
    width = 25.4cm;
    height = 14.29cm;
  |)

  let cfg-font-normal = (|
    size             = 20pt;
    font-latin       = (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0);
    font-cjk         = (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0);
    par-margin-ratio = (0.6, 0.6);
    leading-ratio    = 1.4;
  |)
  let cfg-font-emph = (|
    size             = 20pt;
    font-latin       = (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0);
    font-cjk         = (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0);
    par-margin-ratio = (0.6, 0.6);
    leading-ratio    = 1.4;
  |)

  let cfg-font-mono = (|
    size             = 20pt;
    font-latin       = (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0);
    font-cjk         = (`fonts-noto-sans-cjk-jp:NotoSansMonoCJKjp-Regular`, 1.0, 0.0);
    par-margin-ratio = (0.6, 0.6);
    leading-ratio    = 1.0;
  |)

  let cfg-text = (|
    normal = cfg-font-normal;
    mono   = cfg-font-mono;
    emph   = cfg-font-emph;
    frame-title = (| cfg-font-emph with size = 24pt; |);
    header = (| cfg-font-normal with size = 14pt; |);
    footer = (| cfg-font-normal with size = 14pt; |);
    slide-title = (| cfg-font-emph with size = 28pt; |);
    slide-author = (| cfg-font-emph with size = 20pt; |);
    slide-date = (| cfg-font-emph with size = 20pt; |);
    section-title = (| cfg-font-emph with size = 28pt; |);
    footnote = (| cfg-font-normal with size = 12pt; |);
    quote = (| cfg-font-normal with size = 18pt; |);
  |)

  let color-bg = SlydifiColor.html-color 0x00123E
  let color-fg = SlydifiColor.html-color 0xFFFFFF

  let cfg-color = (|
    bg        = color-bg;
    fg        = color-fg;
    main-grid = SlydifiColor.inner-color color-bg color-fg 0.7;
    sub-grid  = SlydifiColor.inner-color color-bg color-fg 0.9;
    link      = SlydifiColor.html-color 0x3D85C6;
    title     = SlydifiColor.html-color 0xEAD1DC;
    emph      = SlydifiColor.html-color 0xCC241D;
    header    = SlydifiColor.inner-color color-bg color-fg 0.5;
    footer    = SlydifiColor.inner-color color-bg color-fg 0.5;
    quote     = SlydifiColor.inner-color color-bg color-fg 0.2;
    quote-line = SlydifiColor.inner-color color-bg color-fg 0.8;
  |)

  let cfg-spacing = (|
    text-width               = cfg-paper#width -' 25pt *' 2.;
    text-height              = cfg-paper#height -' 20pt *' 2.;
    text-horizontal-margin   = 30pt;
    text-vertical-margin     = 20pt;
    header-basepos           = 3pt;
    footer-basepos           = 10pt;
    main-grid                = 50pt;
    sub-grid                 = 10pt; % この値は適当です
    bg-gr-start-point        = 0pt;
    title-padding-lr         = 12pt;
    title-padding-upper-line = 5pt;
    title-padding-lower-line = 20pt;
    title-line-width         = 3pt;
  |)

  let-mutable is-first-page <- true
  let-mutable is-draft-mode <- false

  let relwid relx = cfg-paper#width *' relx
  let relht rely  = cfg-paper#height *' rely

  let-inline ctx \code text =
    let ctx = ctx |> SlydifiScheme.set-font-config cfg-text#mono in
    let ib = read-inline ctx (embed-string text) in
    ib

  let document record inner=
    let () = is-draft-mode <- record#draft-mode in

    let header pbinfo = block-nil in

    let footer pbinfo =
      let ctx = SlydifiScheme.get-standard-context cfg-text cfg-color cfg-paper#width
        |> SlydifiScheme.set-font-config cfg-text#footer
        |> set-text-color cfg-color#footer
      in
      let it-pageno = embed-string (arabic pbinfo#page-number) in
      let it-count = match get-cross-reference `pagecount` with
        | None -> {??}
        | Some(i) -> embed-string i
      in
      line-break true true ctx (inline-fil ++ (read-inline ctx {#it-pageno;/#it-count;}) ++ inline-skip 20pt)
    in

    let inner = '< +ctx(set-code-text-command (command \code))<#inner;> > in

    SlydifiScheme.document-scheme cfg-paper cfg-text cfg-color cfg-spacing header footer inner

  let-block ctx +make-title record =
    let bg-graphics =
      let title-xmin   = relwid 0.18 in
      let title-xmax   = title-xmin +' 8pt in
      let title-ymin   = relht 0.42 in
      let title-ymax   = title-ymin +' 8pt in
      let title-width  = relwid 0.7 in
      let author-width = relwid 0.7 in
      let date-width   = relwid 0.7 in
      let title-mgn    = 16.8pt in

      let north-rect = Gr.rectangle (title-xmin, title-ymax) (title-xmax, relht 1.00) in
      let south-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, relht 0.00) in
      let east-rect  = Gr.rectangle (title-xmax, title-ymin) (relwid 1.00, title-ymax) in
      let west-rect  = Gr.rectangle (title-xmin, title-ymin) (relwid 0.00, title-ymax) in

      let gr-title =
        let ctx-title = ctx |> SlydifiScheme.set-font-config cfg-text#slide-title
                            |> set-text-color cfg-color#title
        in
        let bbs-title ctx =
          record#title |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib-title = embed-block-top ctx-title title-width
          (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
        in
        SlydifiScheme.put-text (title-xmax +' title-mgn, title-ymax +' title-mgn) (0., 0.) ib-title
      in

      let gr-author =
        let ctx-author = ctx |> SlydifiScheme.set-font-config cfg-text#slide-author
                             |> set-text-color cfg-color#title
        in
        let bbs-author ctx =
          record#author |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib-color = embed-block-top ctx-author author-width
          (fun ctx -> (bbs-author ctx |> List.fold-left (+++) block-nil))
        in
        SlydifiScheme.put-text (title-xmax +' title-mgn, title-ymin -' title-mgn) (0., 1.) ib-color
      in

      let gr-date =
        let ctx-date = ctx |> SlydifiScheme.set-font-config cfg-text#slide-date
                           |> set-text-color cfg-color#title
        in
        let bbs-date ctx =
          record#date |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib-date = embed-block-top ctx-date date-width
          (fun ctx -> (bbs-date ctx |> List.fold-left (+++) block-nil))
        in
        SlydifiScheme.put-text (title-xmax +' title-mgn, (relht 0.2) -' title-mgn) (0., 1.) ib-date
      in

      [
        (fill cfg-color#title north-rect);
        (fill cfg-color#title south-rect);
        (fill cfg-color#title east-rect);
        (fill cfg-color#title west-rect);
        gr-title; gr-author; gr-date;
      ]
    in

    SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page is-draft-mode
      bg-graphics ctx block-nil

  let-block ctx +section its bt =
    let bg-graphics =
      let title-xmin = relwid 0.1 in
      let title-xmax = title-xmin +' 5pt in
      let title-ymin = relht 0.45 in
      let title-ymax = title-ymin +' 5pt in
      let title-width = relwid 0.7 in
      let author-width = relwid 0.7 in
      let date-width = relwid 0.7 in
      let title-mgn = 12pt in

      let north-rect = Gr.rectangle (title-xmin, title-ymax) (title-xmax, relht 1.00) in
      let south-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, relht 0.00) in
      let east-rect = Gr.rectangle (title-xmax, title-ymin) (relwid 1.00, title-ymax) in
      let west-rect = Gr.rectangle (title-xmin, title-ymin) (relwid 0.00, title-ymax) in

      let gr-title =
        let ctx-title = ctx |> SlydifiScheme.set-font-config cfg-text#slide-title
                            |> set-text-color cfg-color#title
        in
        let bbs-title ctx =
          its |> List.map (fun it ->
            line-break true true ctx (( read-inline ctx it) ++ inline-fil))
        in
        let ib-title = embed-block-top ctx-title title-width
          (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
        in
        SlydifiScheme.put-text (title-xmax +' title-mgn, title-ymax +' title-mgn) (0., 0.) ib-title
      in

      let cert-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, title-ymax) in
      let rect-color = SlydifiColor.inner-color cfg-color#title cfg-color#bg 0.4 in

      [
        fill rect-color north-rect;
        fill rect-color south-rect;
        fill rect-color east-rect;
        fill rect-color west-rect;
        gr-title;
      ]
    in

    (SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page is-draft-mode
      bg-graphics ctx block-nil)
        +++ (read-block ctx bt)

  let-block ctx +frame title inner =
    let deco (x, y) wid hgt dpt =
      let path1 =
        let xL = x -' cfg-spacing#text-horizontal-margin +' cfg-spacing#title-padding-lr in
        let yB = y in
        let xR = xL +' cfg-paper#width -' cfg-spacing#title-padding-lr *' 2.0 in
        let yT = yB +' cfg-spacing#title-line-width in
        Gr.rectangle (xL, yT) (xR, yB)
      in
      [ (fill cfg-color#title path1); ]
    in

    let bb-title =
      let ctx-title = ctx
        |> SlydifiScheme.set-font-config cfg-text#frame-title
        |> set-text-color cfg-color#title
        |> set-paragraph-margin 0pt cfg-spacing#title-padding-lower-line in
      let ib-title = read-inline ctx-title title in
      block-frame-breakable ctx-title
        (
          cfg-spacing#title-padding-lr -' cfg-spacing#text-horizontal-margin,
          cfg-spacing#title-padding-lr,
          0pt,
          cfg-spacing#title-padding-upper-line +' cfg-spacing#title-line-width
        )
          (deco, deco, deco, deco)
            (fun ctx ->
              line-break true true ctx (ib-title ++ inline-fil)
            )
    in

    let bg-graphics = [] in
    let ht = cfg-spacing#text-height -' (get-natural-length bb-title) in
    let bb-inner = read-block ctx inner in

    SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page is-draft-mode bg-graphics
      ctx (bb-title +++ bb-inner)

  let-block ctx +frame-nt inner =
    let bg-graphics = [] in
    let bb-inner = read-block ctx inner in
    SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page is-draft-mode bg-graphics ctx bb-inner

  let-block ctx +multiframe n-layer title inner =
    let itlst = [title;] in
    let btlst = [inner;] in

    let frame-f itlst btlst =
      let deco (x, y) wid hgt dpt =
        let path1 =
          let xL = x -' cfg-spacing#text-horizontal-margin +' cfg-spacing#title-padding-lr in
          let yB = y in
          let xR = xL +' cfg-paper#width -' cfg-spacing#title-padding-lr *' 2.0 in
          let yT = yB +' cfg-spacing#title-line-width in
          Gr.rectangle (xL, yT) (xR, yB)
        in
        [ (fill cfg-color#title path1); ]
      in

      let bb-title =
        let ctx-title = ctx
          |> SlydifiScheme.set-font-config cfg-text#frame-title
          |> set-text-color cfg-color#title
          |> set-paragraph-margin 0pt cfg-spacing#title-padding-lower-line in
      let ib-title = read-inline ctx-title (Option.from {} (itlst |> List.nth 0)) in
      block-frame-breakable ctx-title
        (
          cfg-spacing#title-padding-lr -' cfg-spacing#text-horizontal-margin,
          cfg-spacing#title-padding-lr,
          0pt,
          cfg-spacing#title-padding-upper-line +' cfg-spacing#title-line-width
        )
          (deco, deco, deco, deco)
            (fun ctx ->
              line-break true true ctx (ib-title ++ inline-fil)
            )
      in

      let bg-graphics = [] in
      let ht = cfg-spacing#text-height -' (get-natural-length bb-title) in
      let bb-inner =read-block ctx (Option.from '<> (btlst |> List.nth 0)) in

      SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page is-draft-mode bg-graphics
        ctx (bb-title +++ bb-inner)
    in
    SlydifiOverlay.frame-scheme-overlay ctx n-layer frame-f itlst btlst

  let-inline ctx \emph ?:bcf it =
    let bcf = Option.from (fun _ -> true) bcf in
    let ctx2 = SlydifiOverlay.select bcf
      (ctx |> set-text-color cfg-color#emph
           |> SlydifiScheme.set-fonts cfg-text#emph
      ) ctx
    in
    (read-inline ctx2 it)

  let-inline ctx \link ?:it url =
    let ctx2 = ctx |> set-text-color cfg-color#link in
    let ctx-link = match it with
      | None    -> ctx2 |> SlydifiScheme.set-font-config cfg-text#mono
                        |> set-font-size (get-font-size ctx)
      | Some(v) -> ctx2
    in
    let text = match it with
      | None    -> (embed-string url)
      | Some(v) -> v
    in
    read-inline ctx-link {\href(url){#text;}}

  let-block ctx +quote bt =
    let deco (x, y) w h d =
      [
        fill cfg-color#quote-line (Gr.rectangle (x, y) (x +' 6pt, y +' h))
      ]
    in
    block-frame-breakable ctx (20pt, 0pt, 10pt, 10pt)
      (deco, deco, deco, deco)
        (fun ctx -> (
          let ctx2 = ctx
            |> set-text-color cfg-color#quote
            |> SlydifiScheme.set-font-config cfg-text#quote
          in
          (read-block ctx2 bt)
        ))

  let label-dia (idx :: _) ctx =
    let path (x, y) =
      let yc    = y +' cfg-text#normal#size *' 0.3 in
      let north = yc +' cfg-text#normal#size *' 0.25 in
      let east  = x +' cfg-text#normal#size *' 0.25 in
      let south = yc -' cfg-text#normal#size *' 0.25 in
      let west  = x -' cfg-text#normal#size *' 0.25 in
      start-path (x, north)
        |> line-to (east, yc)
        |> line-to (x, south)
        |> line-to (west, yc)
        |> close-with-line
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-tria (idx :: _) ctx =
    let path (x, y) =
      let yc = y +' cfg-text#normal#size *' 0.3 in
      let xl = x in
      let xr = x +' cfg-text#normal#size *' 0.4 in
      let yu = yc +' cfg-text#normal#size *' 0.2 in
      let yd = yc -' cfg-text#normal#size *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
  inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-circ (idx :: _) ctx =
    let path (x, y) =
      let cx = x +' cfg-text#normal#size *' 0.3 in
      let cy = y +' cfg-text#normal#size *' 0.3 in
      let r = cfg-text#normal#size *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-rule idxlst =
    match (List.length idxlst) with
    | 1 -> label-dia idxlst
    | 2 -> label-tria idxlst
    | _ -> label-circ idxlst

  let-rec power-float-int r m =
    match m with
    | 0 -> 1.
    | _ -> (power-float-int r (m - 1)) *. r % 合っているかわからないです

  let max-float f1 f2 = if (1pt *' f1) >' (1pt *' f2) then f1 else f2

  let gen-hachioji-item d ctx depth ib-label text =
    let shrink-ratio =
      max-float (power-float-int 0.95 (depth + d - 1)) 0.85
    in
    let ctx-item =
      let fsize = (get-font-size ctx) *' shrink-ratio in
      ctx |> set-font-size fsize
    in
    let text-indent =
      let fsize = get-font-size ctx-item in
      fsize *' (1.2 *. (float depth))
    in
    let ib-text =
      let index-width = get-natural-width ib-label in
      let item-text-width = (get-text-width ctx) -' text-indent -' index-width in
      embed-block-top ctx-item item-text-width (fun ctx ->
        line-break true true ctx (read-inline ctx text ++ inline-fil)
      )
    in
    line-break true true ctx-item
      ((inline-skip text-indent) ++ ib-label ++ ib-text)

  let hachioji-item = gen-hachioji-item 1

  let gen-label-rule d idxlst =
    match (List.length idxlst + d - 1) with
    | 1 -> label-dia idxlst
    | 2 -> label-tria idxlst
    | _ -> label-circ idxlst

  let-block ctx +listing ?:depth item =
    let depth = depth |> Option.from 1 in
    read-block ctx '< +genlisting(gen-label-rule depth)(gen-hachioji-item depth)(item); >

  let-inline ctx  \listing ?:depth item =
    let depth = depth |> Option.from 1 in
    read-inline ctx {\listing-from-block<+listing?:(depth)(item);>}

  let param-item-overlay = EnumitemBase.make-param (fun x -> false)
  let-inline \conf-item dcf = {\set-item(param-item-overlay)(dcf);}

  let-block ctx +listing-overlay ?:depth item =
    let depth = depth |> Option.from 1 in
    let itemf = SlydifiOverlay.select (EnumitemParam.get param-item-overlay)
      (gen-hachioji-item depth)
        (fun _ _ _ _ -> block-nil)
    in
    read-block ctx '< +xgenlisting(gen-label-rule depth)(itemf)(item); >

  let-block ctx +enumrate-overlay ?:depth item =
    let depth = depth |> Option.from 1 in
    read-block ctx '< +xgenlisting(Enumitem.dot-arabic)(
      fun ctx dp label inner -> (
        let () = display-message (
          `param-item-overlay: ` ^
            (if (EnumitemParam.get param-item-overlay) 1 then `1` else ` `) ^
            (if (EnumitemParam.get param-item-overlay) 2 then `2` else ` `) ^
            (if (EnumitemParam.get param-item-overlay) 3 then `3` else ` `)
        )
        in
        SlydifiOverlay.select (EnumitemParam.get param-item-overlay)
          (gen-hachioji-item depth ctx dp label inner) block-nil
      )
    )(item); >

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (cfg-text#footnote#size *' 0.9)
            |> set-leading (cfg-text#footnote#size *' 1.2)
            |> set-paragraph-margin (cfg-text#footnote#size *' 0.5) (cfg-text#footnote#size *' 0.5)
      in
      line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
    FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
        let it-num = embed-string n in
        read-inline ctx {\*#it-num;}
    | _ ->
        read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
      read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (cfg-text#footnote#size *' 0.9)
            |> set-leading (cfg-text#footnote#size *' 1.2)
            |> set-paragraph-margin (cfg-text#footnote#size *' 0.5) (cfg-text#footnote#size *' 0.5)
      in
      line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
    FootnoteScheme.main ctx None ibf bbf
end
